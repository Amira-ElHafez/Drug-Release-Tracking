# -*- coding: utf-8 -*-
"""FEM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/127sfSRXyMIIW-XaLRP9nFvRC6Jy3c5vJ
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# ─── Model Parameters ─────────────────────────────
D = 0.6
E = 0.2
alpha = 0.2
beta = 1.0
gamma = 1.0
kr = 1.0
ua = 0.0

# ─── Spatial Grid (Nx = 26, x ∈ [-0.5, 0.5]) ───────
Nx = 26
x_min, x_max = -0.5, 0.5
x = np.linspace(x_min, x_max, Nx)
dx = x[1] - x[0]

# ─── FEM Mass & Stiffness Matrices ────────────────
def fem_matrices(Nx, dx):
    M = np.zeros((Nx, Nx))
    K = np.zeros((Nx, Nx))
    for i in range(Nx - 1):
        Mloc = dx / 6 * np.array([[2, 1], [1, 2]])
        Kloc = 1 / dx * np.array([[1, -1], [-1, 1]])
        for a in range(2):
            for b in range(2):
                M[i+a, i+b] += Mloc[a, b]
                K[i+a, i+b] += Kloc[a, b]
    return M, K

M, K_u = fem_matrices(Nx, dx)
_, K_s = fem_matrices(Nx, dx)

# ─── Robin BC for u(x,t) ──────────────────────────
K_u[0, 0] += kr / D
K_u[-1, -1] += kr / D

# ─── Initial Conditions ───────────────────────────
def initial_conditions():
    u0 = np.full(Nx, 0.75)
    v0 = np.full(Nx, 0.25)
    s0 = np.zeros(Nx)
    return np.concatenate([u0, v0, s0])

# ─── Reaction Terms ───────────────────────────────
def f(u, v):
    return - (u * (1 - u) - v * (1 - v))

def g(u, v):
    return (u * (1 - u) - v * (1 - v))

# ─── RHS Function for solve_ivp ───────────────────
def rhs(t, y):
    u = y[:Nx]
    v = y[Nx:2*Nx]
    s = y[2*Nx:]

    fu = f(u, v)
    gu = g(u, v)

    rhs_u = -D * (K_u @ u) - E * (K_s @ s) + M @ fu
    rhs_u[0]  += kr * ua
    rhs_u[-1] += kr * ua

    du_dt = np.linalg.solve(M, rhs_u)
    dv_dt = gu
    ds_dt = -beta * s + alpha * u + gamma * du_dt

    return np.concatenate([du_dt, dv_dt, ds_dt])

# ─── Solve at Snapshot Times ──────────────────────
t_snap = [0.0, 0.4, 0.8, 1.2, 1.6, 2.0]
sol_snap = solve_ivp(rhs, [0, 2], initial_conditions(), t_eval=t_snap,
                     method='BDF', rtol=1e-6, atol=1e-8)

u_snap = sol_snap.y[:Nx, :]
v_snap = sol_snap.y[Nx:2*Nx, :]
s_snap = sol_snap.y[2*Nx:, :]

# ─── Plot u, v, σ vs x at Each Snapshot ───────────
fig, axs = plt.subplots(3, 1, figsize=(10, 10), sharex=True)
labels = ['u(x,t)', 'v(x,t)', 'σ(x,t)']
data = [u_snap, v_snap, s_snap]
colors = plt.cm.viridis(np.linspace(0, 1, len(t_snap)))

for i in range(3):
    for j, t in enumerate(t_snap):
        axs[i].plot(x, data[i][:, j], label=f't={t}', color=colors[j])
    axs[i].set_ylabel(labels[i])
    axs[i].legend()
    axs[i].grid(True)
axs[2].set_xlabel('x')
plt.tight_layout()
plt.show()

# ─── Solve for Time Evolution at x = 0 ────────────
t_dense = np.linspace(0, 2.0, 400)
sol_dense = solve_ivp(rhs, [0, 2], initial_conditions(), t_eval=t_dense,
                      method='BDF', rtol=1e-6, atol=1e-8)

center_idx = Nx // 2
u_center = sol_dense.y[center_idx, :]
v_center = sol_dense.y[Nx + center_idx, :]
s_center = sol_dense.y[2*Nx + center_idx, :]

# ─── Plot Time Evolution at x = 0 ─────────────────
plt.figure(figsize=(8, 5))
plt.plot(t_dense, u_center, label='u(0,t)', color='tab:blue')
plt.plot(t_dense, v_center, label='v(0,t)', color='tab:green')
plt.plot(t_dense, s_center, label='σ(0,t)', color='tab:red')
plt.axhline(0, color='gray', linestyle='--')
plt.title('Time Evolution at x = 0')
plt.xlabel('Time t')
plt.ylabel('Value')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()